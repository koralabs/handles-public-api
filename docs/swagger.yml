---
openapi: 3.0.3
info:
  title: Handles Public API
  description: ADA Handle Public API
  termsOfService: https://mint.handle.me/tou
  contact:
    email: hello@adahandle.com
  version: "{{version}}"
servers:
- url: https://api.handle.me
tags:
- name: handles
  description: Handle endpoints
  externalDocs:
    description: Related Handle Docs
    url: https://api.handle.me/swagger
- name: holders
  description: Handle holder wallets, scripts, addresses, stats
- name: utils
  description: Handle utility endpoints
paths:
  "/handles":
    get:
      tags:
      - handles
      summary: Get all minted handles
      description: Get all minted handles.
        This endpoint will return a plain text list of all Handle names if the
        `Accepts` header is set to `text/plain`. If the `Accepts` header is set
        tp `application/json` it will return a paginated list of JSON Handle objects instead.
      parameters:
      - name: search
        in: query
        description: A portion of the handle name to search for 
        required: false
        schema:
          type: string
      - name: characters
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/Characters"
      - name: length
        in: query
        description: Length of handles to return. This will also accept a range. For example `2-7` will get all Handles with a length >=2 and <=7
        required: false
        schema:
          type: integer
      - name: rarity
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/Rarity"
      - name: numeric_modifiers
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/NumericModifiers"
      - name: og
        in: query
        description: Filter for OG Handles
        required: false
        schema:
          type: boolean
      - name: personalized
        in: query
        description: Filter for Personalized Handles
        required: false
        schema:
          type: boolean
      - name: sort
        in: query
        description: Sort results ascending or descending on Handle name
        required: false
        schema:
          type: string
          enum:
            - asc
            - desc
      - name: handle_type
        in: query
        description: Filter for specific Handle types
        required: false
        schema:
          type: string
          enum:
            - virtual_subhandle
            - nft_subhandle
            - handle
      - name: records_per_page
        in: query
        description: Number of Handles to return per page in paginated results. Maximum of 1000.
          Only `application/json` returns paginated results. `text/plain` always returns the full search set.
        required: false
        schema:
          type: integer
      - name: page
        in: query
        description: The page number to return in paginated results. Either `page` or `slot_number` can be
          used in paginated results. Using the `page` parameter will order results by Handle name. This means
          pagination can potentially miss some Handles if Handles are added while paginating. As an alternative
          see `slot_number` below.
        required: false
        schema:
          type: integer
      - name: slot_number
        in: query
        description: The slot number to start at when paginating results. Either `page` or `slot_number` can be
          used in paginated results. Using the `slot_number` parameter will order results by the slot number the
          Handles were created or updated in. Pagination can potentially return the same Handle more than once
          if Handles are added or updated during pagination. As an alternative, see `page` above.
        required: false
        schema:
          type: integer
      - name: holder_address
        in: query
        description: The holder_address key of the wallet/script that the Handle is in. See the Holder endpoints for more information 
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Successful and up to date
          headers:
            x-handles-search-total:
              schema:
                type: integer
                description: Number of total search results, regardless of pagination
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                example: |-
                  handle123
                  my.handle
                  i-always-hodl
                  ...
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Handle"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          headers:
            x-handles-search-total:
              schema:
                type: integer
                description: Number of total search results, regardless of pagination
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                example: |-
                  handle123
                  my.handle
                  i-always-hodl
                  ...
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Handle"
        '400':
          description: Invalid filter
      security:
      - api-key: []
  "/handles/list":
    post:
      tags:
        - handles
      parameters:
      - name: type
        in: query
        description: 
          POST an array to match or reverse-lookup minted Handles. 
          This may be combined with the all of the search and filtering
          parameters of the `/handles` endpoint 
          (see [/handles](#/handles/get_handles) for more information).
        schema:
                $ref: "#/components/schemas/FilterType"
      requestBody:
        description: |
          An array of strings that can be any one type of FilterType.
        required: true
        content:
          application/json:
            schema:
                type: array
            examples:
              handle: 
                value: [ "handle_1", "my_handle_2", "other_handle", "etc..."]
              paymentkeyhash: 
                value: [ "120e95a22031d2cc21d6716788f709074fb89e9b8fbad6284eb8a074", "1771c13e355e10a4203d8948af58d16bce2b28d5f8a02835b0b21811", "b99182d0aba4003c6a80c98c58e24a91ca2ce50d04ea72361c9b9815", "etc..."]
      responses:
        '200':
          description: Successful and up to date
          headers:
            x-handles-search-total:
              schema:
                type: integer
                description: Number of total search results, regardless of pagination
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                example: |-
                  handle123
                  my.handle
                  i-always-hodl
                  ...
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Handle"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          headers:
            x-handles-search-total:
              schema:
                type: integer
                description: Number of total search results, regardless of pagination
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                example: |-
                  handle123
                  my.handle
                  i-always-hodl
                  ...
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Handle"
        '400':
          description: Invalid filter
      security:
      - api-key: []
  "/handles/{handle}":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Handle"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Handle"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/utxo":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/personalized":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Personalization"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Personalization"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/personalized/utxo":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/subhandle_settings":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubHandleSettings"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubHandleSettings"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/subhandle_settings/utxo":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/public_datum":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubHandleSettings"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubHandleSettings"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/public_datum/utxo":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/subhandles":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/Handle"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/Handle"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  # *** OBSOLETE `/handles` endpoint *** #
  "/handles/{handle}/reference_token":
    get:
      deprecated: true
      description: Use `/handles/{handle}/personalized/utxo` instead.
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UTxO"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/datum":
    get:
      deprecated: true
      tags:
      - handles
      description: Get the datum in the same UTxO as the Handle, if present.
        This endpoint will return a plain text response of just the Cbor string if the 
        `Accepts` header is `text/plain`. If the `Accepts` header is `application/json` 
        the API will attempt to convert the Cbor to JSON, but may fail of the object 
        isn't actually JSON.
      parameters:
      - name: default_key_type
        in: query
        description: Keys in CBOR maps default to 'utf8' encoding when converting to JSON. 
          If the keys should default to 'hex' encoding, set this to 'hex'
        required: false
        schema:
          type: string
      - name: numeric_keys
        in: query
        description: JavaScript doesn't support numeric object keys. CBOR does. If JSON keys can be converted to CBOR integers, then do so
        required: false
        schema:
          type: boolean
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                description: Cbor/hex encoded string of datum from the blockchain
                example: a2446e616d654b436c65766572204769726c4469706673582e516d50636b3439384379355457594a53354e69667832523834466a596a4a4c693662386f484d4e6b666878705334
            application/json:
              schema:
                type: string
                description: Attempt to convert the Cbor into a json object string
                example: '{ "name": "Clever Girl", "ipfs": "QmPck498Cy5TWYJS5Nifx2R84FjYjJLi6b8oHMNkfhxpS4" }'
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                description: Cbor/hex encoded string of datum from the blockchain
                example: a2446e616d654b436c65766572204769726c4469706673582e516d50636b3439384379355457594a53354e69667832523834466a596a4a4c693662386f484d4e6b666878705334
            application/json:
              schema:
                type: string
                description: Attempt to convert the Cbor into a json object string
                example: '{ "name": "Clever Girl", "ipfs": "QmPck498Cy5TWYJS5Nifx2R84FjYjJLi6b8oHMNkfhxpS4" }'
        '400':
          description: If Cbor to JSON conversion fails or the Handle is an invalid format
        '404':
          description: Datum not found
      security:
      - api-key: []
  "/handles/{handle}/script":
    get:
      deprecated: true
      tags:
      - handles
      description: Get the reference script in the same UTxO as the Handle, if present.
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      - name: hex
        in: query
        description: Set to `true` if the `{handle}` is in hex form (full asset name hex, including asset label)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                description: Cbor/hex encoded string of script from the blockchain
                example: a2446e616d654b436c65766572204769726c4469706673582e516d50636b3439384379355457594a53354e69667832523834466a596a4a4c693662386f484d4e6b666878705334
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                description: Cbor/hex encoded string of script from the blockchain
                example: a2446e616d654b436c65766572204769726c4469706673582e516d50636b3439384379355457594a53354e69667832523834466a596a4a4c693662386f484d4e6b666878705334
        '400':
          description: If Handle is an invalid format
        '404':
          description: Script not found
      security:
      - api-key: []
  "/holders":
    get:
      tags:
      - holders
      summary: Lists the wallet/script/enterprise addresses that hold Handles.
      description: Lists the wallet/script/enterprise addresses that hold Handles.
      parameters:
      - name: records_per_page
        in: query
        description: Number of Holders to return per page in paginated results. Maximum of 1000.
        required: false
        schema:
          type: integer
      - name: page
        in: query
        description: The page number to return in paginated results.
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: List of Handle holders and some simple stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Holder"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holder"
        '400':
          description: Invalid filter
      security:
      - api-key: []
  "/holders/{holder_address}":
    description: Holder details
    get:
      tags:
      - holders
      parameters:
      - name: holder_address
        in: path
        description: The stake/enterprise/script/other address of the Holder
        required: true
        schema:
          type: string
      responses:
        '200':
          description: List of Handle holders and some simple stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holder"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Holder"
        '400':
          description: Invalid Holder format
        '404':
          description: Holder not found
      security:
      - api-key: []
  "/stats":
    get:
      tags:
      - utils
      responses:
        '200':
          description: Handle Stats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stats"
  "/swagger":
    get:
      tags:
      - utils
      responses:
        '200':
          description: This swagger documentation
  "/health":
    get:
      tags:
      - utils
      responses:
        '200':
          description: Healthy and scanning is complete
        '202':
          description: Healthy, but scanning is still catching up to the tip of the blockchain
        '503':
          description: HTTP application failure
  "/datum":
    post:
      tags:
      - utils
      parameters:
      - name: from
        in: path
        description: The format of the datum being passed in
        required: true
        schema:
          $ref: "#/components/schemas/DatumType"
      - name: to
        in: path
        description: The format of the datum to encode/decode to
        required: true
        schema:
          $ref: "#/components/schemas/DatumType"
      - name: numeric_keys
        in: query
        description: JavaScript doesn't support numeric object keys. CBOR does. If JSON keys can be converted to CBOR integers, then do so
        required: false
        schema:
          type: boolean
      - name: indefinite_arrays
        in: query
        description: |
          Whether to use CBOR "definite" or "indefinite" arrays. Defaults to `true`
          <br />`true` will wrap arrays in the `9f[...]ff` CBOR Indefinite Major Type
          <br />`false` will preceed the array with the CBOR Major Type `8n[...]` (where `n` is the length of the array)
        required: false
        schema:
          type: boolean
      - name: default_to_text
        in: query
        description: Whether strings should all be converted to CBOR byte strings or text strings. Defaults to `false`
          <br />`false` will preceed the bytes with the CBOR Major Type `4n[...]` (bytes)
          <br />`true` will preceed the bytes with the CBOR Major Type `6n[...]` (text)
        required: false
        schema:
          type: boolean
      - name: chunk_size
        in: query
        description: Strings or Buffers larger than `chunk_size` are broken into an array of strings or Buffers. 
          Defaults to `64`. As an example, "01234567890123456789" with a `chunk _size` of 10 will convert to the CBOR equivalent of
          ['0123456789', '0123456789']
        required: false
        schema:
          type: integer
      requestBody:
        description: |
          The CBOR or JSON to encode/decode.
          <br />NOTE: To insert constructors where needed, wrap the object in the format:
          <br />
          ```json
          constructor_0: [ <your_arbitrary_json> ]
          ```
          Where `"_0"` is a number from 0-3
        required: true
        content:
          application/json:
            schema:
                type: object
                example: '{ "name": "Clever Girl", "ipfs": "QmPck498Cy5TWYJS5Nifx2R84FjYjJLi6b8oHMNkfhxpS4" }'
                description: Use when passing in JSON
          text/plain:
            schema:
                type: string 
                example: |
                  a2446e616d654b436c65766572204769726c4469706673582e516d50636b3439384379355457594a53354e69667832523834466a596a4a4c693662386f484d4e6b666878705334
                description: Use when passing in CBOR
      responses:
        '200':
          description: datum was able to be encoded/decoded successfully
          content:
            application/json:
              schema:
                type: object
                example: '{ "name": "Clever Girl", "ipfs": "QmPck498Cy5TWYJS5Nifx2R84FjYjJLi6b8oHMNkfhxpS4" }'
                description: Used when the `"to:"` parameter is JSON
            text/plain:
              schema:
                type: string
                example: |
                  a2446e616d654b436c65766572204769726c4469706673582e516d50636b3439384379355457594a53354e69667832523834466a596a4a4c693662386f484d4e6b666878705334
                description: Used when the `"to:"` parameter is CBOR

        '400':
          description: datum cbor or json was in the wrong format
        '503':
          description: HTTP application failure
components:
  schemas:
    AddressType:
      type: string
      example: wallet
      description: |
        <br />If it is a Shelley address and a script, it will say `script`.
        <br />If it is Shelley, is not a script, and has a stake key, it will be `wallet`.
        <br />If it is Shelley, is not a script, and doesn't have a stake key, it will be `enterprise`.
        <br />If the address is not a Shelley address, it will be `other`.
      enum:
      - wallet
      - script
      - enterprise
      - other
    Characters:
      type: string
      example: letters,numbers,special
      description: "Included character types in the handles. Numbers includes negative
        and decimal numbers. Combining them does an 'AND' search. Ex - `letters,numbers`
        will find Handles that have both letters and numbers.
        <br />`letters` - All characters are letters
        <br />`numbers` - All characters are valid numeric characters (including decimals and negative)
        <br />`special` - All characters are dash, period, or underscore"
    DatumType:
      type: string
      example: plutus_data_cbor
      description: |
        <br />json (cardano-cli can take this with --tx-out-datum-json-value)
        <br />tx_metadata_json (aka "Detailed Schema")
        <br />tx_metadata_cbor (the actual TxMetadata CBOR bytes)
        <br />plutus_data_json (aka "Schema Json" with Plutus constructors/fields)
        <br />plutus_data_cbor (the actual PlutusData CBOR bytes)
      enum:
      - json
      - tx_metadata_json
      - tx_metadata_cbor
      - plutus_data_json
      - plutus_data_cbor
    DesignerSettings:
      type: object
      properties:
        creator_defaults_enabled:
          type: boolean
          description: True is the user elected to use the creator defaults from the chosen background
        bg_border_color:
          $ref: "#/components/schemas/HexString" 
        pfp_border_color:
          $ref: "#/components/schemas/HexString" 
        font_shadow_color:
          $ref: "#/components/schemas/HexString" 
        font_shadow_size:
          type: array
          items:
            type: integer
          example: [12, 12, 10]
          description: An array of three numbers representing vertical offset, horizontal offset, and blur radius
        pfp_image:
          type: string
          description: IPFS hash of the selected profile pic
          example: ipfs://Q2de4Fg56tNHy82300000001
        bg_image:
          type: string
          description: IPFS hash of the selected background
          example: ipfs://Q2de4Fg56tNHy82300000001
        pfp_asset:
          type: string
          description: Hex string of policy id and asset name of the pfp_image on chain asset
          example: 94da605878403d07c144fe96cd50fe20c16186dd8d171c78ed6a8768436c6179436861726c6f74746538353338
        bg_asset:
          type: string
          description: Hex string of policy id and asset name of the bg_image on chain asset
          example: b8842fe3a0eae5011252c16566995d2c8f1bae85d380410cd21ea91f000de140556e646572776f726c645f48616e646c65735f6267
        text_ribbon_colors:
          type: array
          description: The color used for the ribbon or the colors used for the gradient on the ribbon.
          items:
            $ref: "#/components/schemas/HexString" 
          example: [0a1fd3ff, 22d1af88, 31bc2399]
        qr_bg_color:
          $ref: "#/components/schemas/HexString" 
        qr_inner_eye:
          type: string
          description: Two values separated by a comma. The first is the inner eye style ('dot', 'square', 'rounded').
            The second is the inner eye color as an hex RGBA value preceded by a hash symbol
          example: "square,#FFFFFF"
        qr_outer_eye:
          type: string
          description: Two values separated by a comma. The first is the outer eye style ('dot', 'square', 'rounded').
            The second is the outer eye color as an hex RGBA value preceded by a hash symbol
          example: "square,#FFFFFF"
        qr_dot:
          type: string
          description: Two values separated by a comma. The first is the dots style ('dot', 'square', 'rounded').
            The second is the dots color as an hex RGBA value preceded by a hash symbol
          example: "square,#FFFFFF"
        qr_image:
          type: string
          description: Either the URL or the `data:image;base64` data in the center of the QR code
          example: "ipfs://Q2de4Fg56tNHy82300000001"
        font_color:
          type: string
          $ref: "#/components/schemas/HexString" 
          description: The color of the font in hex including alpha transparency
          example: 0a1fd3ff
        font:
          type: string
          example: "ShortStackMod,https://claynation.nyc3.cdn.digitaloceanspaces.com/ada_handles/ShortStackNew.ttf"
        qr_link:
          type: string
        socials: 
          type: array
          description: The url and display text of the social entries selected from Personalization
          items:
            $ref: "#/components/schemas/SocialEntry"
        pfp_zoom:
          type: number
          description: The percentage that the PFP can be zoomed in as an integer greater than 100 
          example: 125
        pfp_offset:
          type: array
          items:
            type: integer
          description: The [x,y] offset in pixels from the center of the PFP circle
          example: [-10, 25]
        text_ribbon_gradient:
          type: string
          enum:
          - none
          - linear-XX
          - radial
          description: The gradient of the ribbon colors.
            <br />`none` - no gradient
            <br />`linear-XX` - Linear gradient where `XX` is the degrees offset of the starting point - ex `linear-45`
            <br />`radial` - Radial gradient from the center of the ribbon
          example:
        socials_color:
          type: string
          description: ""
          example:
        circuit_color:
          type: string
          description: ""
          example:
    FilterType:
      type: string
      example: ultra_rare
      description: |-
        Filter Types:
        <br />`handle`, 
        <br />`handlehex` (without CIP-67 label), 
        <br />`assetname` (with CIP-67 label), 
        <br />`holder` (bech32 stake address, bech32 script address, or bech32 "enterprise" address),
        <br />`bech32stake`, 
        <br />`bech32address`,
        <br />`hexaddress`,
        <br />`paymentkeyhash`, or
        <br />`stakekeyhash`
      enum:
      - handle
      - handlehex
      - assetname
      - holder
      - bech32stake
      - bech32address
      - hexaddress
      - paymentkeyhash
      - stakekeyhash
    Handle:
      required:
      - name
      type: object
      properties:
        hex: 
          type: string
        name:
          type: string
          example: my.handle
        handle_type:
          type: string
          $ref: "#/components/schemas/Handle"
          description: Handle, NFT SubHandle, or Virtual SubHandle
        virtual:
          type: object
          description: Additional information only available on Virtual SubHandles
          properties:
            expires_time: 
              type: number
              description: The POSIX time the Virtual SubHandle expires
            public_mint: 
              type: boolean
              description: True if this Virtual SubHandle was publically minted
        holder:
          type: string
          description: Current Holder of the Handle (see the Holder endpoints for more information)
          example: stake1uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        holder_type:
          $ref: "#/components/schemas/AddressType"
        image:
          type: string
          description: IPFS URL of the personalized handle image
          example: ipfs://hash_of_personalized_image
        standard_image:
          type: string
          description: IPFS URL of the factory default handle image
          example: ipfs://hash_of_default_image
        image_hash:
          type: string
          description: SHA256 Hash of the personalized handle image
          example: 05dbb47e32ad6b89074c286a73543bdb957c01f7abf82b2f106584dc99432bb1
        standard_image_hash:
          type: string
          description: SHA256 Hash of the default image data
          example: 05dbb47e32ad6b89074c286a73543bdb957c01f7abf82b2f106584dc99432bb1
        length:
          type: integer
          example: 9
          description: Length of the root Handle
        og:
          type: boolean
          description: OG status
          example: 0
        og_number:
          type: integer
          description: Limited edition OG number. 0 means not an OG.
          example: 0
        rarity:
          $ref: "#/components/schemas/Rarity"
        characters:
          $ref: "#/components/schemas/Characters"
        numeric_modifiers:
          $ref: "#/components/schemas/NumericModifiers"
        sub_length:
          type: number
          description: Total length of the SubHandle, including `@` and root Handle
        sub_rarity:
          $ref: "#/components/schemas/Rarity"
        sub_characters:
          $ref: "#/components/schemas/Characters"
        sub_numeric_modifiers:
          $ref: "#/components/schemas/NumericModifiers"
        default_in_wallet:
          type: string
          description: The name of the default Handle in this wallet
          example: my_default_hndl
        pfp_image:
          type: string
          description: IPFS hash of the selected profile pic
          example: ipfs://Q2de4Fg56tNHy82300000001
        bg_image:
          type: string
          description: IPFS hash of the selected background
          example: ipfs://Q2de4Fg56tNHy82300000001
        pfp_asset:
          type: string
          description: Hex string of policy id and asset name of the pfp_image on chain asset
          example: 94da605878403d07c144fe96cd50fe20c16186dd8d171c78ed6a8768436c6179436861726c6f74746538353338
        bg_asset:
          type: string
          description: Hex string of policy id and asset name of the bg_image on chain asset
          example: b8842fe3a0eae5011252c16566995d2c8f1bae85d380410cd21ea91f000de140556e646572776f726c645f48616e646c65735f6267
        resolved_addresses:
          type: object
          properties:
            ada:
              type: string
              example: addr1e00000000000000000000000000000000000001
            eth:
              type: string
              example: addr1e00000000000000000000000000000000000002
            btc:
              type: string
              example: addr1e00000000000000000000000000000000000003
        original_address:
              type: string
              example: addr1e00000000000000000000000000000000000001
              description: If enabled by the root Handle owner, this will show the address that the SubHandles was originally sent to on mint
        version:
          type: string
          description: The version of the Handle
          example: 1
        svg_version:
          type: string
          description: The version of the Handle image renderer that rendered the main nft image
          example: 1
        utxo:
          type: string
          description: The transaction hash and index number (UTxO) that the Handle is in. In the format of `txhash#index`
          example: 8f1d7ec063ce83d93d1bad658886e81568d19ca9bd8dd0e6e268d7be3e33c653#1
        lovelace:
          type: integer
          description: The lovelace amount in the UTxO the Handle is in
        has_datum:
          type: boolean
          description: "`true` if the UTxO that the Handle is in also has a datum value"
        created_slot_number:
          type: integer
          description: The slot number this Handle was minted
        updated_slot_number:
          type: integer
          description: The slot number this Handle was updated
    HexString:
      type: string
      example: "0x1a3dfb"
    Holder:
      type: object
      properties:
        total_handles:
          type: integer
          example: 1421
          description: Total Handles this Holder holds
        address:
          type: string
          example: stake1d4fg5dghrdxxxxxxxxxxxxxxxxxxx
          description: Stake Key, Enterprise Address, Script Address, or Other Address
        type:
          $ref: "#/components/schemas/AddressType"
        known_owner_name:
          type: string
          example: jpg.store
          description: The name of the vendor/exchange if the address is from a known list of vendors/exchanges/projects. 
        default_handle:
          type: string
          example: my_default_hndl
          description: The default Handle for this Holder 
        manually_set:
          type: boolean
          description: If `true` then the user set this as their default Handle manually.
            If `false`, then a simple algorithm attempted to pick the Holder's best Handle. The algorithm selects in this order -
            <br />OG Handles first
            <br />If no OG Handle then shortest Handle
            <br />If many have the same length, then the earliest minted slot number
            <br />If multiple minted at the same time, then ascending alpha order
    NumericModifiers:
      type: string
      description: |-
        This property will have one of the following:
          <br />No modifier (blank) is a positive whole number, or not a number
          <br />`negative` - Negative whole number
          <br />`decimal` - Positive decimal
          <br />`negative,decimal` - Negative decimal
          <br />Example:
          <br />`1000` = no modifiers/blank
          <br />`-100` = "negative"
          <br />`10.0` = "decimal"
          <br />`-1.0` = "negative,decimal"
      example: negative,decimal
    Personalization:
      type: object
      properties:
        designer:
          $ref: "#/components/schemas/DesignerSettings"
        portal:
          $ref: "#/components/schemas/PortalSettings"
        socials:
          type: array
          items:
            $ref: "#/components/schemas/SocialEntry"
        trial:
          type: boolean
          description: True if the Handle is using an asset that is still in an "trial" status.
            This can be useful for DApps to display standard_image as opposed to image just in case
            the policy hasn't properly declared NSFW imagery
        nsfw:
          type: boolean
          description: True if the Handle is using an asset that has a "nsfw" status.
            This can be useful for DApps to display standard_image as opposed to image to avoid NSFW imagery
        validated_by:
          type: string
          description: The PubKeyHash of the signer of the personalization transaction that validated the
            personalization. Trusted vendors should be verifying ownership, authenticity, and Handle Standard
            compliance.
    Rarity:
      type: string
      example: ultra_rare
      description: |-
        Handle rarities:
        <br />`basic` - 8-15 characters
        <br />`common` - 4-7 characters
        <br />`rare` - 3 characters
        <br />`ultra_rare` - 2 characters
        <br />`legendary` - 1 character
      enum:
      - basic
      - common
      - rare
      - ultra_rare
      - legendary
    Stats:
      type: object
      properties:
        total_handles:
          type: integer
          example: 195874
          description: "Total of all Handles minted"
        total_holders:
          type: integer
          example: 52167
          description: Total number of Handle Holders including wallets/scripts/enterprise/other addresses
        # We can add `total_subhandles`, `total_<per_rarity>`, `top_holders`
    PortalSettings:
      type: object
      properties:
        type:
          type: string
        domain: 
          type: string
          example: https://handle.me
        custom_settings:
          $ref: "#/components/schemas/HexString"
        default:
          type: boolean
    SocialEntry:
      type: object
      properties:
        url:
          type: string
          description: Valid URL. Supported schemas - `http://`, `https://`, `mailto:`, `tel:`, `ipfs://`
            Social websites with known host names will be authenticated to reduce fraud/phishing
        display:
          type: string
          description: The display text to show either on the Handle if selected or on the Portal if selected.
    SubHandleSettings:
      type: object
      properties:        
        nft:
          type: object
        virtual:
          type: object
        buy_down_paid:
          type: number
        buy_down_price:
          type: number
        buy_down_percent:
          type: number
        agreed_terms:
          type: string
        payment_address:
          type: string
        migrate_sig_required:
          type: boolean
    UTxO:
      type: object
      properties:
        tx_id:
          type: string
          description: The current UTxO transaction ID 
        index:
          type: integer
          description: The current UTxO index 
        lovelace:
          type: integer
          description: The lovelace in the UTxO 
        datum:
          type: string
          description: The datum CBOR in the UTxO if there is any
        address:
          type: string
          description: The address of the UTxO 
        script:
          type: string
          description: If known, the script/contract (as CBOR) that the UTxO is locked to, if there is one
        reference_script:
          type: string
          description: The reference script (as CBOR) that is saved in this UTxO, if there is one
  requestBodies:
    Handle:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Handle"
  securitySchemes:
    api-key:
      type: apiKey
      name: api-key
      in: header
