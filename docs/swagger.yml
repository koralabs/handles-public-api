---
openapi: 3.0.3
info:
  title: Handles Public API
  description: ADA Handle Public API
  termsOfService: https://handle.io/tou
  contact:
    email: hello@adahandle.com
  version: 0.0.1
servers:
- url: https://api.handle.me
tags:
- name: handles
  description: Handle endpoints
  externalDocs:
    description: Related Handle Docs
    url: https://api.handle.me/swagger
- name: holders
  description: Handle holder wallets, scripts, addresses, stats
- name: utils
  description: Handle utility endpoints
paths:
  "/handles":
    get:
      tags:
      - handles
      summary: Get all minted handles
      description: Get all minted handles.
        This endpoint will return a plain text list of all Handle names if the
        `Accepts` header is set to `text/plain`. If the `Accepts` header is set
        tp `application/json` it will return a paginated list of JSON Handle objects instead.
      parameters:
      - name: characters
        in: query
        required: false
        schema:
          "$ref": "#/components/schemas/Characters"
      - name: length
        in: query
        description: Length of handles to return
        required: false
        schema:
          type: integer
      - name: rarity
        in: query
        required: false
        schema:
          "$ref": "#/components/schemas/Rarity"
      - name: numeric_modifiers
        in: query
        required: false
        schema:
          "$ref": "#/components/schemas/NumericModifiers"
      - name: records_per_page
        in: query
        description: Number of Handles to return per page in paginated results. Maximum of 1000.
          Only `application/json` returns paginated results. `text/plain` always returns the full search set.
        required: false
        schema:
          type: integer
      - name: page
        in: query
        description: The page number to return in paginated results. Either `page` or `slot_number` can be
          used in paginated results. Using the `page` parameter will order results by Handle name. This means
          pagination can potentially miss some Handles if Handles are added while paginating. As an alternative
          see `slot_number` below.
        required: false
        schema:
          type: integer
      - name: slot_number
        in: query
        description: The slot number to start at when paginating results. Either `page` or `slot_number` can be
          used in paginated results. Using the `slot_number` parameter will order results by the slot number the
          Handles were created or updated in. Pagination can potentially return the same Handle more than once
          if Handles are added or updated during pagination. As an alternative, see `page` above.
        required: false
        schema:
          type: integer
      - name: holder_address
        in: query
        description: The holder_address key of the wallet/script that the Handle is in. See the Holder endpoints for more information 
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Successful and up to date
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                example: |-
                  handle123
                  my.handle
                  i-always-hodl
                  ...
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Handle"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                example: |-
                  handle123
                  my.handle
                  i-always-hodl
                  ...
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Handle"
        '400':
          description: Invalid filter
      security:
      - api-key: []
  "/handles/{handle}":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Handle"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Handle"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/handles/{handle}/datum":
    get:
      tags:
      - handles
      description: Get the datum in the same UTxO as the Handle, if present.
        This endpoint will return a plain text response of just the Cbor string if the 
        `Accepts` header is `text/plain`. If the `Accepts` header is `application/json` 
        the API will attempt to convert the Cbor to JSON, but may fail of the object 
        isn't actually JSON.
      responses:
        '200':
          description: Successful operation
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                description: Cbor/hex encoded string of datum from the blockchain
                example: A2446E616D654B436C65766572204769726C4469706673582E516D50636B3439384379355457594A53354E69667832523834466A596A4A4C693662386F484D4E6B666878705334
            application/json:
              schema:
                type: string
                description: Attempt to convert the Cbor into a json object string
                example: '{ "name": "Clever Girl", "ipfs": "QmPck498Cy5TWYJS5Nifx2R84FjYjJLi6b8oHMNkfhxpS4" }'
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                description: Cbor/hex encoded string of datum from the blockchain
                example: A2446E616D654B436C65766572204769726C4469706673582E516D50636B3439384379355457594A53354E69667832523834466A596A4A4C693662386F484D4E6B666878705334
            application/json:
              schema:
                type: string
                description: Attempt to convert the Cbor into a json object string
                example: '{ "name": "Clever Girl", "ipfs": "QmPck498Cy5TWYJS5Nifx2R84FjYjJLi6b8oHMNkfhxpS4" }'
        '400':
          description: If Cbor to JSON conversion fails or the Handle is an invalid format
        '404':
          description: Datum not found
      security:
      - api-key: []
  "/handles/{handle}/personalized":
    get:
      tags:
      - handles
      parameters:
      - name: handle
        in: path
        description: The Handle name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Personalization"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Personalization"
        '400':
          description: Invalid Handle format
        '404':
          description: Handle not found
      security:
      - api-key: []
  "/holders":
    get:
      tags:
      - holders
      summary: NOT YET IMPLEMENTED. Lists the wallet/script/enterprise addresses that hold Handles.
      description: NOT YET IMPLEMENTED. Lists the wallet/script/enterprise addresses that hold Handles.
      parameters:
      - name: records_per_page
        in: query
        description: Number of Holders to return per page in paginated results. Maximum of 1000.
        required: false
        schema:
          type: integer
      - name: page
        in: query
        description: The page number to return in paginated results.
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: List of Handle holders and some simple stats
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Holder"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Holder"
        '400':
          description: Invalid filter
      security:
      - api-key: []
  "/holders/{holder_address}":
    description: Holder details
    get:
      tags:
      - holders
      parameters:
      - name: holder_address
        in: path
        description: The stake/enterprise/script/other address of the Holder
        required: true
        schema:
          type: string
      responses:
        '200':
          description: List of Handle holders and some simple stats
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Holder"
        '202':
          description: Successful, but scanning is still catching up to the tip of the blockchain
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Holder"
        '400':
          description: Invalid Holder format
        '404':
          description: Holder not found
      security:
      - api-key: []
  "/stats":
    get:
      tags:
      - utils
      responses:
        '200':
          description: Handle Stats
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Stats"
  "/swagger":
    get:
      tags:
      - utils
      responses:
        '200':
          description: This swagger documentation
  "/health":
    get:
      tags:
      - utils
      responses:
        '200':
          description: Healthy and scanning is complete
        '202':
          description: Healthy, but scanning is still catching up to the tip of the blockchain
        '503':
          description: HTTP application failure
components:
  schemas:
    Handle:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: my.handle
        holder_address:
          type: string
          description: Current Holder of the Handle (see the Holder endpoints for more information)
          example: stake1uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        holder_type:
          "$ref": "#/components/schemas/AddressType"
        nft_image:
          type: string
          description: IPFS URL of the personalized handle image
          example: ipfs://hash_of_personalized_image
        original_nft_image:
          type: string
          description: IPFS URL of the original NFT handle
          example: ipfs://hash_of_base_nft_image
        length:
          type: integer
          example: 9
        og:
          type: integer
          description: OG status. 0 means not an OG.
          example: 0
        rarity:
          "$ref": "#/components/schemas/Rarity"
        characters:
          "$ref": "#/components/schemas/Characters"
        numeric_modifiers:
          "$ref": "#/components/schemas/NumericModifiers"
        default_in_wallet:
          type: string
          description: The name of the default Handle in this wallet
          example: my_default_hndl
        profile_pic:
          type: string
          description: IPFS hash of the selected profile pic - cropped and zoomed
          example: Q2de4Fg56tNHy82300000001
        background:
          type: string
          description: IPFS hash of the selected background
          example: Q2de4Fg56tNHy82300000001
        resolved_addresses:
          type: object
          properties:
            ada:
              type: string
              example: addr1e00000000000000000000000000000000000001
            eth:
              type: string
              example: addr1e00000000000000000000000000000000000002
            btc:
              type: string
              example: addr1e00000000000000000000000000000000000003
        version:
          type: string
          description: The version of the Handle
          example: 1
        utxo:
          type: string
          description: The transaction hash and index number (UTxO) that the Handle is in. In the format of `txhash#index`
          example: 8f1d7ec063ce83d93d1bad658886e81568d19ca9bd8dd0e6e268d7be3e33c653#1
        has_datum:
          type: boolean
          description: "`true` if the UTxO that the Handle is in also has a datum value"
        created_slot_number:
          type: integer
          description: The slot number this Handle was minted
        updated_slot_number:
          type: integer
          description: The slot number this Handle was updated
    Holder:
      type: object
      properties:
        total_handles:
          type: integer
          example: 1421
          description: Total Handles this Holder holds
        address:
          type: string
          example: stake1d4fg5dghrdxxxxxxxxxxxxxxxxxxx
          description: Stake Key, Enterprise Address, Script Address, or Other Address
        type:
          "$ref": "#/components/schemas/AddressType"
        known_owner_name:
          type: string
          example: jpg.store
          description: The name of the vendor/exchange if the address is from a known list of vendors/exchanges/projects. 
        default_handle:
          type: string
          example: my_default_hndl
          description: The default Handle for this Holder 
        manually_set:
          type: boolean
          description: If `true` then the user set this as their default Handle manually.
            If `false`, then a simple algorithm attempted to pick the Holder's best Handle. The algorithm selects in this order -
            <br />OG Handles first
            <br />If no OG Handle then shortest Handle
            <br />If many have the same length, then the earliest minted slot number
            <br />If multiple minted at the same time, then ascending alpha order
    Stats:
      type: object
      properties:
        total_handles:
          type: integer
          example: 185123
          description: "Total of all Handles minted"
        # network_load_percent:
        #   type: integer
        #   example: 76
        #   description: Cardano network load calculated by block size over the last 20 blocks
        # reservation_queue_size:
        #   type: integer
        #   example: 47
        #   description: Number of Handles or NFT SubHandles currently waiting to be minted
        # current_handle_prices:
        #   type: string
        #   example: 10,50,100,500
        #   description: Comma-separated Handle price list. (basic,common,rare,ultra_rare)
        total_holders:
          type: integer
          example: 42167
          description: Total number of Handle Holders including wallets/scripts/enterprise/other addresses
    Personalization:
      type: object
      properties:
        to_be_determined:
          type: string
          example: TBD
    Characters:
      type: string
      example: letters,numbers,special
      description: "Included character types in the handles. Numbers includes negative
        and decimal numbers. Combining them does an 'AND' search. Ex - `letters,numbers`
        will find Handles that have both letters and numbers.
        <br />`letters` - All characters are letters
        <br />`numbers` - All characters are valid numeric characters (including decimals
        and negative)
        <br />`special` - All characters are dash, period, or underscore"
    Rarity:
      type: string
      example: ultra_rare
      description: |-
        Handle rarities:
        <br />`basic` - 8-15 characters
        <br />`common` - 4-7 characters
        <br />`rare` - 3 characters
        <br />`ultra_rare` - 2 characters
        <br />`legendary` - 1 character
      enum:
      - basic
      - common
      - rare
      - ultra_rare
      - legendary
    NumericModifiers:
      type: string
      description: |-
        This property will have one of the following:
          <br />No modifier (blank) is a positive whole number, or not a number
          <br />`negative` - Negative whole number
          <br />`decimal` - Positive decimal
          <br />`negative,decimal` - Negative decimal
          <br />Example:
          <br />`1000` = no modifiers/blank
          <br />`-100` = "negative"
          <br />`10.0` = "decimal"
          <br />`-1.0` = "negative,decimal"
      example: negative,decimal
    AddressType:
      type: string
      example: wallet
      description: |
        <br />If it is a Shelley address and a script, it will say `script`.
        <br />If it is Shelley, is not a script, and has a stake key, it will be `wallet`.
        <br />If it is Shelley, is not a script, and doesn't have a stake key, it will be `enterprise`.
        <br />If the address is not a Shelley address, it will be `other`.
      enum:
      - wallet
      - script
      - enterprise
      - other
  requestBodies:
    Handle:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Handle"
  securitySchemes:
    api-key:
      type: apiKey
      name: api-key
      in: header
